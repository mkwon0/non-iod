# One worker process per CPU core.
worker_processes 16;

# Also set
# /etc/security/limits.conf
#   web soft nofile 999999
#   web hard nofile 999999
# /etc/default/nginx
#   ULIMIT="-n 999999"
worker_rlimit_nofile 999999;

pid /run/nginx.pid;

events {
    #
    # Determines how many clients will be served by each worker process.
    # (Max clients = worker_connections * worker_processes)
    # Should be equal to `ulimit -n`
    #
    worker_connections 512;

    #
    # Let each process accept multiple connections.
    # Accept as many connections as possible, after nginx gets notification
    # about a new connection.
    # May flood worker_connections, if that options is set too low.
    multi_accept on;

    #
    # Preferred connection method for newer linux versions.
    # Essential for linux, optimized to serve many clientswith each thread.
    #
    use epoll;
}

http {

    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"'
                    'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

    upstream fastcgi_backend {
        server nginx${SCALE_ID}-php1:9000;
        server nginx${SCALE_ID}-php2:9000;

        keepalive 3000;
    }

    server {
        listen 80;
    
        server_name localhost;
    
        root /srv/www/api;
        index index.php index.htm index.html;
    
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass fastcgi_backend;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_read_timeout 180;
        }


        #
        # send the client a "request time out" if the body is not loaded
        # by this time. Default 60.
        #
        client_header_timeout 3000;
        client_body_timeout 3000;

        #
        # Every 60 seconds server broadcasts Sync packets, so 90 is
        # a conservative upper bound
        #
        keepalive_timeout 3000; # default 65
        send_timeout 3000; # default 60

        #
        # Allow the server to close the connection after a client stops
        # responding.
        # Frees up socket-associated memory.
        #
        reset_timedout_connection on;
    
        ##
        # Logging Settings
        ##

        #
        # Use analytics to track stuff instead of using precious file IO resources.
        #
        error_log /var/log/nginx/api_error.log;
        access_log /var/log/nginx/api_access.log main;
    }
}
